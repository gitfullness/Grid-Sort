/* Grid Sort

coded by Julia Hiyeon Kim (2019)


Assigning is sorting.

No swapping
No comparing numbers 

When a new number is added for sorting, the previously sorted or assigned numbers do not move.

Stable & Re-assignable 

Sorting or assigning does not take much time.

Writing is retrieving the sorted numbers.

Writing the entire sorted numbers takes time accordingly to how big the largest number is.
A segment of numbers can be printed.

*/

window.onload = function() {

	var test = [57,285,0,854,0,27,5,5,2885,497,57,16,803,653,62,905,975,367,147,99,58,207643,73,83,95,24,3,1986,47,954,1,99,954,36,67,2,753,97,368,1243,5794,2690,68985,5780,256884,5783,68995,357,4568,24457,1457,7643,86,8653,7642,87653,865325,8643,3678,864,86431,8875,8754,83789,3560,3568,345,4567,145688,456,467,67894,356,4678,25,8764,3568,7990,457,378,24568,456789,4578,7890,256,67895,7889035,346,568,356,56890,467,7890,1358,78004,46780,4579,5680,1357800,46788,1789003,3568,2678065,3578,5789,47,7894,47,6789,367,4678,5688,80659,5789,67900,568990,46,4779,366,6890,7846,357,4,56,68,2,7890,4578,6780,4679,2450,4567,579,4,7,82,467,5770,3568,6790,467,6,90,246,5789,567,37,468,25,6890,478,5890,579,456,68990,4578,5680,25,6780,35,58,279,3,75,975,46,785,6789,164,5538,744,85,2,579,753,5538,975,158,689,379,965,57,803,84,653,85,73,864,8643,9047,864,783,7,4,932,5,80,97,79,849,7,3,5,10,0,1335747,4568846,354,78643,5678,5678,2456,45789,467807,578645,2457,468,467892,456744,1357856,3467575,346,56789,24578,46787,345668,5778884,25746,782,46778,4678954,356788,5688067,134678,3567,4678,2567890,9999999,77805,34678,56780,35,568,5779,2458,568,46780,4678,36789,35689,67893,6789,2568,5778,25678,46,778995,35679,45689,57880,56884,34674,35789,24678,467467,467893,5678947,3678,4689,467956,14577,56789,578990,235,3568,3567,454,3635,2746,35742,35774,46882,27475,273668,364,2747685,3747643,368544,865226,357885,3668464,374647,3885474,25784,4748,2789467,473748,36,38,4875,28,36,48,26,6783,457,568,356,56884,4674,47,762,1,5788,67885,356787,3567,3546577,4747784,4567857,4678657,4678532,865435,6325,4688,56754,46788,35,56786,5789646,4432554,567865,568999,567890,356746,3574,57,3579,467,57895,6789457,87646,46789,467894,567885,5578,457784,56788,4678657,467,1244254,2453,788087,908896,8990768,14,385,385,4826,4957,596,604,6037,505,5847,597,1365,357,3588,5746,378,467,35774,4769,9076,8905,785,4,8,5,2,790,5942,795,6890,58,2580,579,5794,90,902,795,89904,268,689,3,69,90,1857,58380,358,25,468,46,467,78,785,4789,90789,89068,89006,9078,6900,68904,680089,478,700,2958,86905,580,7903,146,2958,49699,38690,4858,49500,473,58995,6805,2,596,690,57905,69658,3674,7907,69004,3579,89058,39607,606947,478,37,60,69,3700,5969,696,58,90790,7070,5858,38595,7060,700,490,470,579,268,3807,58079,3800,470790,386,79058,2680,590,2570,795,3790,70683,28580,58576,3680,69094,35857,5879,2569,7900,4747,5839,69597,26580,585,479,58948,4647,3690,5807,58002,473,48,7048,68556,274,799,484,385,9];

	document.write(test+"<br />");
	document.write("Count: "+test.length+"<br />");
	document.write("<br />");

	var assign_sort = [];
	var x = 0;
	while (x < test.length){
		if (assign_sort[test[x]] === undefined){
			assign_sort[test[x]] = [];
			assign_sort[test[x]][0] = test[x];
		}
		else {
			assign_sort[test[x]].push(test[x]);
		}
		x = x + 1;
	}

	var x = 0;
	var definedCount = 1;
	while (x < assign_sort.length) {
		if (assign_sort[x] === undefined)
			x = x + 1;
		else {
			document.write("(");
	   		document.write(definedCount);
	   		document.write(") ");
	   		document.write(assign_sort[x]);
	   		document.write("<br />");
	   		x = x + 1;
	   		definedCount = definedCount + 1;
		}
	}
};
